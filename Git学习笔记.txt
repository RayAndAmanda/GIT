1，设置git 的用户名和邮箱地址
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

2，cd 到目标路径，创建管理的仓库
$ git init

3，再路径下添加文件或文件夹  提交到暂存区
$ git add readme.txt


$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."



4，添加注释     合并到分支里
$ git commit -m "wrote a readme file"

5，查看日志
详细日志
$ git log

简略日志
$ git log --pretty=oneline

6，查看操作指令的日志
$ git reflog

7，回退到上一版本
$ git reset --hard HEAD^


上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

8，回退到某个固定版本
$ git reset --hard 1094a

现在总结一下：

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

9，查看状态
$ git status

10，丢弃工作区的修改
$ git checkout -- file

11，可以把暂存区的修改撤销掉（unstage），重新放回工作区
$ git reset HEAD <file>

$ git reset HEAD readme.txt

小结：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


12，删除一个文件
$ git rm test.txt  
版本库中删除该文件，那就用命令git rm删掉，并且git commit：



